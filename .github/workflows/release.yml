name: Release
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "New version type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - dev

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --local --unset-all "http.https://github.com/.extraheader"
          git config --local --add "http.https://github.com/.extraheader" \
              "AUTHORIZATION: Basic $(base64 <<< ${{ secrets.FIB_PAT }}:)"
          git config --global user.email "${GITHUB_ACTOR:-ci-noreply}@github.com"
          git config --global user.name "${GITHUB_ACTOR:-GitHub Actions}"

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.0"

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --prefer-dist

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=$(composer show -s | grep "versions" | head -n 1 | awk '{print $2}')
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. -v type="$VERSION_TYPE" '{
            if (type == "patch") {
              $3++
            } else if (type == "minor") {
              $2++
              $3=0
            } else if (type == "major") {
              $1++
              $2=0
              $3=0
            }
            print $1"."$2"."$3
          }')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "after applying $VERSION_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: Debug NEW_VERSION
        run: echo "NEW_VERSION is ${{ env.NEW_VERSION }}"

      - name: Validate NEW_VERSION
        run: |
          if [[ ! "${{ env.NEW_VERSION }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid NEW_VERSION format: ${{ env.NEW_VERSION }}"
            exit 1
          fi

      - name: Update composer.json
        if: ${{ github.event.inputs.version_type != 'dev' }}
        run: |
          composer config version ${{ env.NEW_VERSION }}
          git add composer.json
          git add composer.lock
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"

      - name: Create Git tag
        if: ${{ github.event.inputs.version_type != 'dev' }}
        run: git tag v${{ env.NEW_VERSION }}

      - name: Build
        if: ${{ github.event.inputs.version_type != 'dev' }}
        run: composer install --no-dev --optimize-autoloader

      - name: Publish on Packagist
        if: ${{ github.event.inputs.version_type != 'dev' }}
        env:
          COMPOSER_AUTH: '{"http-basic":{"composer.example.com":{"username":"${{ secrets.COMPOSER_USERNAME }}","password":"${{ secrets.COMPOSER_PASSWORD }}"}}}'
        run: |
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          if [[ "$VERSION_TYPE" == "dev" ]]; then
            composer publish --access public --no-interaction --stability dev
          else
            composer publish --access public --no-interaction
          fi

      - name: Push new Git commit and tag
        if: ${{ github.event.inputs.version_type != 'dev' }}
        run: |
          git push origin main
          git push origin v${{ env.NEW_VERSION }}
