name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "New version type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.email "${{ secrets.FIB_BOT_MAIL }}"
          git config --global user.name "${{ secrets.FIB_BOT }}"

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.0"

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --prefer-dist

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' composer.json)
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          if [[ "$VERSION_TYPE" == "patch" ]]; then
            patch=$((patch + 1))
          elif [[ "$VERSION_TYPE" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$VERSION_TYPE" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          else
            echo "Unsupported version type specified."
            exit 1
          fi
          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "After applying $VERSION_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: Update composer.json
        run: |
          jq --arg version "$NEW_VERSION" '.version = $version' composer.json > tmp.json && mv tmp.json composer.json
          git add composer.json
          git commit -m "Bump version to $NEW_VERSION"

      - name: Create a new branch
        id: create_branch
        run: |
          BRANCH_NAME="release-${{ env.NEW_VERSION }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Pull latest changes from remote
        run: |
          git fetch origin
          git pull origin ${{ env.BRANCH_NAME }} || true

      - name: Push changes to the new branch
        run: git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: 'Release ${{ env.NEW_VERSION }}'
          body: 'This is an automated pull request to merge changes for release ${{ env.NEW_VERSION }}.'
          labels: release

      - name: Build
        if: github.event_name == 'pull_request'
        run: composer install --no-dev --optimize-autoloader

      - name: Publish on Packagist
        if: github.event_name == 'pull_request'
        env:
          COMPOSER_AUTH: |
            {
              "http-basic": {
                "packagist.org": {
                  "username": "${{ secrets.COMPOSER_USERNAME }}",
                  "password": "${{ secrets.PACKAGIST_TOKEN }}"
                }
              }
            }
        run: |
          echo "Pushing package version to Packagist..."
          # Packagist should automatically pick up new tags from your repository
          # So no specific command is needed here to publish
